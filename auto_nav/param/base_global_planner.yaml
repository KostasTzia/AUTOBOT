
GlobalPlanner:                              # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_dijkstra: false                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: true                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  use_quadratic: true     #default true
  visualize_potential: true
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0                         # default 0.0
  planner_window_y: 0.0                         # default 0.0
  default_tolerance: 0.0                     # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  orientation_mode: 0

  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0        # default 0.0

  lethal_cost: 253                              # default 253
  neutral_cost: 50                              # default 50
  cost_factor: 3.0                              # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true

  outline_map: true                   # default: true. For the usage of a non static (rolling window) global costmap this needs to be set to false



CarrotPlanner:
  step_size: 0.20
  min_dist_from_robot: 0.10




NavfnROS :
  allow_unknown: true  #you must also set the track_unknown_space param for that layer to be true, or it will convert all 
                       # your unknown space to free space (which navfn will then happily go right through).   

  planner_window_x : 0.3 #Specifies the x size of an optional window to restrict the planner to. This can be useful for 
                         # restricting NavFn to work in a small window of a large costmap.                                   

  planner_window_y : 0.5 #Specifies the y size of an optional window to restrict the planner to. This can be useful for 
                         # restricting NavFn to work in a small window of a large costmap.                       

  default_tolerance : 0.0 #NavFn will attempt to create a plan that is as close to the specified goal 
                          #as possible but no further than default_tolerance away                      

  visualize_potential : false  #Specifies whether or not to visualize the potential area computed by navfn via a PointCloud2                       
  outline_map: false